a + b
source("C:/work/rsou/pro1/ex2.R", encoding = 'UTF-8', echo=TRUE)
source("C:/work/rsou/pro1/ex2.R", encoding = 'UTF-8', echo=TRUE)
# matrix 계산
a <- matrix(c(1,2,3,4,),2,2)
b <- matrix(5:8,2,2)
a
b <- matrix(5:8,2,2)
b
a + b
a
# matrix 계산
a <- matrix(c(1,2,3,4),2,2)
a
a + b
a -b
a * b
a%*% b
diag(3)
a
t(a)
solve(a)
solve(solve(a))
# 행 또는 열 결합
x1 <- c(5,40,50:52)
x1
x2 <- c(30,5,6:8)
x2
aa <- rbind(x1,x2) # 행 묶음음
aa
cbind(x1,x2)
# apply 함수 : 함수를 실행하는 함수
x <- matrix(x(1:9), nrow= 3, ncol = 3)
# apply 함수 : 함수를 실행하는 함수
x <- matrix(c(1:9), nrow= 3, ncol = 3)
x
apply(x, 1, max)
apply(x, 1, max) # 1: 행기준, 2 열기준준
apply(x, 1, min)
apply(x, 2, mean)
apply(x,1, func)
func <- function(x){
x + c(5, 10, 15)
}
apply(x,1, func)
lapply(x,func)
apply(x,1, func)
#arr2 <- arrat(1:12)
arr2 <- arrat(1:12,dim=c(6,2))
arr2 <- arrat(1:12)
arr2 <- array(1:12)
arr2 <- array(1:12,dim=c(6,2))
arr2
dim(arr2)
#arr2 <- array(1:12)
#arr2 <- array(1:12,dim=c(6,2))
arr2 <- array(1:12, dim=c(3,2,2))
arr2
dim(arr2)
arr2[,,1] #1면
arr2[,1,1] #1면 1열
arr2[1,,1] #1면 1행
arr2[1,1,1] #1면 1행 1열
li <- list("1", "tom", 85, "2", "james", 85)
li
class(li)
unli <- unlist(li)
unli
num <- list(c(1:5), c(6:10), c("a",'b','c'))
num
num[1]
class(num[1])
num[[1]]
class(num[[1]])
num[[1]][2]
member <- list(name='hong', age=22)
member
member$name
member$age
# vector로 데이터프레임 작성
no <- c(1,2,3)
name <- x('hong', 'lee','kim')
# vector로 데이터프레임 작성
no <- x(1,2,3)
# vector로 데이터프레임 작성
no <- c(1,2,3)
name <- c('hong', 'lee','kim')
pay <- c(250,300,350)
df <- data.frame(bunho=no, irum=name, imkum=pay)
df
is(df)
ls(df)
is(df)
mode(df)
df2 <- data.frame(no, name, pay)
df2
df <- data.frame(irum=c('james','oscar','tom'), nai=c(27,25,35), row.names = c('one','two','three'))
df
iris
head(df,2)
head(iris,2)
df
nrow(df)
ncol(df)
summart(df)
rownames(df)
colnames(df)
summary(df) #요약 통계계
#matrix로 데이터프레임 작성
m <- matrix(c(1,'hong',150,1,'lee',350,3,'kim',550), 3, by=T)
m
mdf <- data.frame(m)
mdf
m <- matrix(1:6, nrow = 3)
m
mdf <- data.frame(m)
mdf
colnames(mdf) <- c('c1','c2')
mdf
typeof(mdf)
mdf$c1
mdf$c1
mdf['c1']
mdf[,2]
mdf[1,2]
mdf[1:2, 1:2]
#조건 지정
mdf[mdf$c1 ==2,]
subset(mdf, c1 == 2)
mdf[mdf$c1 == 2 & mdf$c2 == 5, ]
subset(mdf,c1==2, select = c(1,2))
mdf$c2 <- ifelse(mdf$c2 == 4, NA, mdf$c2)
mdf
summary(mdf)
mean(mdf$c1)
mean(mdf$c1)
mean(mdf$c2, na,rm=T)
mdfr <- rbind(mdf, c(10,11))
mdfr
# 열 삭제
mdfc[, 'c1'] <- NULL
mdfc
#행 삭제
mdfr
mdfr <- mdfr[-1, ]
mdfr
txtdf
#txt 파일을 이요하여 data.frame 작성
txtdf <- read.table("https://raw.githubusercontent.com/pykwon/Test-datas-for-R/master/emp.txt", header= T)
txtdf
csvdf <- read.csv("emp2.csv", header=F, col.names = c('번호','이름','월급'))
csvdf
#data.frame으로 파일 저장
df <- data.frame(eng=c(90,80,70),mat=c(50,60,70), class=c(1,2,3))
df
gewd()
getwd
getwd()
save(df,file = 'C:/work/rsou/pro1/df1.rda')
rm(df)
df
load
load()
load('C:/work/rsou/pro1/df1.rda')
df
install.packages("data.table")
library(data.table)
dt <- as.data.table(csvdf)
dt
dt2 <- data.table(bun=c(1,2), irum=c('tom', 'john'))
dt2
#dataFrame 결합
height <- data.frame(id=c(1,2,2), h=c(180,175,178))
height
height <- data.frame(id=c(1,2,2), w=c(80,75,88))
weight <- data.frame(id=c(1,2,2), w=c(80,75,88))
weight
height
merge(height,weight)
merge(height,weight, by.x='id',by.y='id')
#dataFrame 결합
height <- data.frame(id=c(1,2,2), h=c(180,175,178))
weight <- data.frame(id=c(1,2,2), w=c(80,75,88))
weight
height
merge(height,weight)
merge(height,weight, by.x='id',by.y='id')
merge(height,weight, all=TRUE)
#참고 : 키보드로 자료입력
#scan() 함수 사용
n <- scan()
sum(1:n)
#참고 : 키보드로 자료입력
#scan() 함수 사용
n <- scan()
#참고 : 키보드로 자료입력
#scan() 함수 사용
n <- scan()
#edit() 함수 사용
df1 <-data.frame()
df1
df1 <- edit(df1)
df1
#도수 분표표 - 명목형 자료
df <- read.csv("textdata/ex_studentlist.csv")
df
#도수 분표표 - 명목형 자료
df <- read.csv("textdata/ex_studentlist.csv")
#도수 분표표 - 범주형 중 명목형 자료 : gender, bloodtype
df <- read.csv("textdata/ex_studentlist.csv")
#도수 분표표 - 범주형 중 명목형 자료 : gender, bloodtype
df <- read.csv("textdata/ex_studentlist.csv")
#도수 분표표 - 범주형 중 명목형 자료 : gender, bloodtype
df <- read.csv("textdata/ex_studentlist.csv")
#도수 분표표 - 범주형 중 명목형 자료 : gender, bloodtype
df <- read.csv("testdata/ex_studentlist.csv")
df
source("C:/work/rsou/pro1/ex4.R", encoding = 'UTF-8', echo=TRUE)
source("C:/work/rsou/pro1/ex5.R", encoding = 'UTF-8', echo=TRUE)
# 산술, 관계, 논리 연산
no<- 7
no>=2
no>=2 +2*2
source("C:/work/rsou/pro1/ex5.R", encoding = 'UTF-8', echo=TRUE)
# 산술, 관계, 논리 연산
no<- 7
no >= 2+2*2| no <5 %% 2
no >= 5 & no <= 2
no != 5
#if
x <-10; y <-5
if(x = y <= 10){
cat("결과는", x+y)
cat("\n 참일떄 수행")
}else{
print("거짓일 떄 처리")
}
source("C:/work/rsou/pro1/ex5.R", encoding = 'UTF-8', echo=TRUE)
#switch
switch('age', id='hong', age=33, name='홍길동')
switch(a, mean(1:10), sd(1:10))
a <- 1
switch(a, mean(1:10), sd(1:10))
#for
i <- 1:10
for(n in i){
print(n)
}
for(n in i){
if( n%%2==0){
next
}else{
print(n)
}
}
#while
i <- 0
while(i<10){
i = i + 1
print(i)
}
cat('while 수행 후 i : ', i)
i <-0
while(T){
i = i+1
print(i)
if(i == 3)break
}
cat('while 수행 후 i : ', i)
#repeat
cnt <- 1
repeat{
print(cnt)
cnt = cnt + 2
ib(cnt > 10)break
}
repeat{
print(cnt)
cnt = cnt + 2
if(cnt > 10)break
}
# 내장 함수
seq(0,5,by=1.5)
# 내장 함수
seq(0,5,by=1.5)
# 내장 함수
seq(0,5,by=1.5)
rnorm(10, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
aa <- rnorm(10, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
print(aa)
hist(aa)
aa <- rnorm(10000, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
print(aa)
hist(aa)
print(mean(aa))
hist(aa)
print(aa)
print(mean(aa))
hist(aa)
print(mean(aa))
aa <- rnorm(100000, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
print(mean(aa))
aa <- rnorm(10, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
print(aa)
print(mean(aa))
set.seed(123)
aa <- rnorm(10, mean=0, sd = 1) #sd는 표준편자 rnorm은 정규분포 mean은 평균
print(aa)
print(mean(aa))
hist(aa)
bb <- funif(10, min = 0, max = 100) #균등분포를 따르는 난수
print(bb)
hist(bb)
bb <- funif(10, min = 0, max = 100) #균등분포를 따르는 난수
bb <- runif(10, min = 0, max = 100) #균등분포를 따르는 난수
print(bb)
hist(bb)
sample(0:100, 10)
sample(0:100, 10)
sample(0:100, 10)
sample(0:100, 10)
vec <- 1:10
min(vec)
mean(vec)
median(vec)
quantile(vec)
table(vec) #빈도수수
func1()
#사용자의 정의 함수
func1 <- function(){
print('사용자 정의 함수')
}
func1()
func2 <- function(){
cat('arg: ', arg)
cat('매개 변수 사용')
return(arg1 + 10)
}
func2(5)
func2 <- function(){
cat('arg: ', arg1)
cat('매개 변수 사용')
return(arg1 + 10)
}
func2(5)
func2 <- function(arg1){
cat('arg: ', arg1)
cat('매개 변수 사용')
return(arg1 + 10)
}
func2(5)
func2(5)
func2 <- function(arg1){
cat('arg: ', arg1)
cat('\n매개 변수 사용')
return(arg1 + 10)
}
func2(5)
#윤년 체크
yun_func <- function(y){
if(y %% 4 == 0 & y %% 100 != 0 | y %% 400 == 0){
paste(y,'년은 윤년')
}else{
paste(y,'년은 평년')
}
}
yun_func(2020)
yun_func(2022)
stu <- read.csv('testdata/ex_studentlist.csv')
head(stu,n=3)
barplot(stu$grade)
table(stu$grade)
barplot(stu$grade)
table(stu$grade)
barplot(stu$grade,xlab = '학년', ylab="학생") #y에 한계값 주기
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=c(1,2,3)) #y에 한계값 주기
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=c(1,2,3), space=2)
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=rainbow(4), horiz =)
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=rainbow(4), horiz =1)
# 점 그래프
dotchart(stu$grade)
par(mfrow=c(1,2))
par(mfrow=c(1,2)) #그래프 영역을 1행 2열로 변경
barplot(stu$grade)
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=rainbow(4), horiz =T)
par(mfrow=c(2,1)) #그래프 영역을 1행 2열로 변경
barplot(stu$grade)
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=rainbow(4), horiz =T)
par(mfrow=c(1,2)) #그래프 영역을 1행 2열로 변경
barplot(stu$grade)
barplot(stu$grade,xlab = '학년', ylab="학생",main="제목", col=rainbow(4), horiz =T)
# 점 그래프
par(mfrow=c(1,1))
dotchart(stu$grade)
dotchart(stu$grade, color=2:5, lcolor ='black', pch=1:2, cex=1.5)
#원 그래프
df <- na.omit(stu)
df
pie(df$age, labels =  df$age, lty =2)
title('원 그래프')
pie(df$age, labels =  df$age, lty =3)
title('원 그래프')
#연속형 데이터를 시각화
boxplot(stu$height)
#연속형 데이터를 시각화
mean(stu$height)
#연속형 데이터를 시각화
mean(stu$height); median(stu$height); quantile(stu$height)   #평균, 중앙값, 사분위 수
boxplot(stu$height)
boxplot(stu$height, range = 0)
boxplot(stu$height, range = 1)
boxplot(stu$height, range = 1, notch = T)
abline(h = 170, lty=3, col="blue")
#hist
hist(stu$height)
hist(stu$height, breaks = 5)
hist(stu$height, breaks = 5)
hist(stu$height, breaks = 2)
hist(stu$height, breaks = 5)
hist(stu$height, breaks = 5, prob = T)
lines(density(stu$height))
#산전도, 산포도
plot(stu$height)
?plot
# scatter plot 산전도, 산포도
plot(stu$height)
#시각화 지원 라이브러리
install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg
ggplot(data = mpg, aes(x=displ))
ggplot(data = mpg, aes(x=displ, y=hwy))+geom_point()
ggplot(data = mpg, aes(x=displ, y=hwy))+geom_point()+xlim(3,6)+ ylim(10,30)
? ggplot
ggplot(data = mpg, aes(x=displ, y=hwy))+geom_point()
ggplot(data = mpg, aes(x=displ, y=hwy))+geom_boxplot()
ggplot(data = mpg, aes(x=displ, y=hwy))+geom_line()
install.packages("DBI")
source("C:/work/rsou/pro1/ex8db.R", encoding = 'UTF-8', echo=TRUE)
library(rjava)
library(DBI)
library(RJDBC)
install.packages("RSQLite")
library(RSQLite)
#SQLite와 연결
conn <- dbConnect(RSQLite::SQLite(), ":memory:")
conn
mtcars
dbWriteTable(conn,"mytab",mtcars)
dbListFields(conn,"mytab") #테이블의 칼럼 목록 확인인
query <- "select mpg, cyl, hp* from mytab where mpg > 30"
goodAll <- dbGetQuery(conn,query)
goodAll
dbListFields(conn,"mytab") #테이블의 칼럼 목록 확인인
query <- "select mpg, cyl, hp* from mytab where mpg > 30"
goodAll <- dbGetQuery(conn,query)
goodAll
dbWriteTable(conn,"mytab",mtcars)
#SQLite와 연결
conn <- dbConnect(RSQLite::SQLite(), ":memory:")
conn
mtcars #내장된 dataset
head(mtcars,2)
dbWriteTable(conn,"mytab",mtcars)
dbListTables(conn) #테이블의 목록 확인
dbListFields(conn,"mytab") #테이블의 칼럼 목록 확인인
query <- "select mpg, cyl, hp* from mytab where mpg > 30"
goodAll <- dbGetQuery(conn,query)
query <- "select mpg, cyl, hp * from mytab where mpg > 30"
goodAll <- dbGetQuery(conn,query)
query <- "select mpg, cyl, hp from mytab where mpg > 30"
goodAll <- dbGetQuery(conn,query)
goodAll
#원격 DB : maridDB
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver",
classPath = "c:/work/mariadb-java-client-2.6.2.jar")
conn <- dbConnect(drv = drv, "jdbc:mysql://127.0.0.1:3306/test","root","123")
dbListTables(conn)
dbListTables(conn)
sql <- "select * from sangdata"
aaa <- dbGetQuery(conn,sql)
aaa
class(aaa)
aaa$sang
mean(aaa$su)
plot(aaa$dan)
table(aaa$sang)
aaa2 <- dbGetQuery(conn,"select code,sang, su from sangdata where sang like '가죽%'")
aa2
aaa2
aaa2 <- dbGetQuery(conn,"select code,sang, su surang from sangdata where sang like '가죽%'")
aaa2
aaa2 <- dbGetQuery(conn,"select code,sang, su as surang from sangdata where sang like '가죽%'")
aaa2
#레코드 추가
sql <- "insert into sangdata values(12,'아디다스',3,220000)"
dbSendUpdate(conn,sql)
df <- data.frame(code=13, sang='핸드크림',su=7, dan=5000)
df
dbSendUpdate(df)
dbSendUpdate(conn,"insert into sangdata values(?,?,?,?)",df$code,df$sang,df$su,df$dan)
dbGetQuery(conn,"select * from sangdata")
#레코드 수정
dbSendUpdate(conn,"update sangdata set sang=?, su=? where code=?",'비비크림',"11","13")
dbGetQuery(conn,"select * from dangdata")
dbGetQuery(conn,"select * from sangdata")
#레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code?","11")
#레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=?","11")
dbGetQuery(conn,"select * from sangdata")
